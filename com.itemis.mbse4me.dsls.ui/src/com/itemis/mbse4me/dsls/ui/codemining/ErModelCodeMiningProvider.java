/*
 * generated by Xtext 2.32.0
 */
package com.itemis.mbse4me.dsls.ui.codemining;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.codemining.ICodeMining;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.codemining.AbstractXtextCodeMiningProvider;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.util.IAcceptor;

import com.itemis.mbse4me.dsls.erModel.ModelContainer;

@SuppressWarnings("restriction")
public class ErModelCodeMiningProvider extends AbstractXtextCodeMiningProvider {
	@Override
	protected void createCodeMinings(IDocument document, XtextResource resource, CancelIndicator indicator,
		IAcceptor<? super ICodeMining> acceptor) throws BadLocationException {

		EList<EObject> contents = resource.getContents();
		if (contents.isEmpty()) {
			return;
		}

		EObject eObject = contents.get(0);

		if (eObject instanceof ModelContainer) {
			ModelContainer modelContainer = (ModelContainer) eObject;

			ICompositeNode node = NodeModelUtils.getNode(modelContainer);
			int beforeLineNumber = document.getLineOfOffset(node.getOffset());

			int productCount = modelContainer.getProducts().size();
			if (productCount != 0) {
				String productCountHeaderText = productCount + " product" + (productCount == 1 ? "" : "s");
				acceptor.accept(createNewLineHeaderCodeMining(beforeLineNumber, document, productCountHeaderText));
			}

			int assembliesCount = modelContainer.getAssemblies().size();
			if (assembliesCount != 0) {
				String assembliesCountHeaderText = assembliesCount + " assembl" + (assembliesCount == 1 ? "y" : "ies");
				acceptor.accept(createNewLineHeaderCodeMining(beforeLineNumber, document, assembliesCountHeaderText));
			}

			int componentsCount = modelContainer.getComponents().size();
			if (componentsCount != 0) {
				String componentsCountHeaderText = componentsCount + " component" + (componentsCount == 1 ? "" : "s");
				acceptor.accept(createNewLineHeaderCodeMining(beforeLineNumber, document, componentsCountHeaderText));
			}
		}
	}
}
